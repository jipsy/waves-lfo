"use strict";

// concat the lfo stream, time and metaData into a single buffer
// the concatenation is done as follow :
//  * time          => 8 bytes
//  * frame.length  => 2 bytes
//  * frame         => 4 * frameLength bytes
//  * metaData      => rest of the message
// @return  ArrayBuffer of the created message
// @note    must create a new buffer each time because metaData length is not known
module.exports.encodeMessage = function (time, frame, metaData) {
  // should probably use use DataView instead
  // http://www.html5rocks.com/en/tutorials/webgl/typed_arrays/
  var time64 = new Float64Array(1);
  time64[0] = time;
  var time16 = new Uint16Array(time64.buffer);

  var length16 = new Uint16Array(1);
  length16[0] = frame.length;

  var frame16 = new Uint16Array(frame.buffer);

  var metaData16 = str2Uint16Array(JSON.stringify(metaData));

  var bufferLength = time16.length + length16.length + frame16.length + metaData16.length;
  var buffer = new Uint16Array(bufferLength);

  // buffer is the concatenation of time, frameLength, frame, metaData
  buffer.set(time16, 0);
  buffer.set(length16, time16.length);
  buffer.set(frame16, time16.length + length16.length);
  buffer.set(metaData16, time16.length + length16.length + frame16.length);

  return buffer.buffer;
};

// recreate the Lfo stream (time, frame, metaData) form a buffer
// created with `encodeMessage`
module.exports.decodeMessage = function (message) {

  var buffer = message.data;

  // time is a float64Array of size 1 (8 bytes)
  var timeArray = new Float64Array(buffer.slice(0, 8));
  var time = timeArray[0];

  // frame length is encoded in 2 bytes
  var frameLengthArray = new Uint16Array(buffer.slice(8, 10));
  var frameLength = frameLengthArray[0];

  // frame is a float32Array (4 bytes) * frameLength
  var frameByteLength = 4 * frameLength;
  var frame = new Float32Array(buffer.slice(10, 10 + frameByteLength));

  // metaData is the rest of the buffer
  var metaDataArray = new Uint16Array(buffer.slice(10 + frameByteLength));
  var metaData = JSON.parse(Uint16Array2str(metaDataArray));

  return { time: time, frame: frame, metaData: metaData };
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImVzNi91dGlscy9uZXR3b3JrLXV0aWxzLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7QUFVQSxNQUFNLENBQUMsT0FBTyxDQUFDLGFBQWEsR0FBRyxVQUFTLElBQUksRUFBRSxLQUFLLEVBQUUsUUFBUSxFQUFFOzs7QUFHN0QsTUFBSSxNQUFNLEdBQUcsSUFBSSxZQUFZLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDakMsUUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQztBQUNqQixNQUFJLE1BQU0sR0FBRyxJQUFJLFdBQVcsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7O0FBRTVDLE1BQUksUUFBUSxHQUFHLElBQUksV0FBVyxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ2xDLFVBQVEsQ0FBQyxDQUFDLENBQUMsR0FBRyxLQUFLLENBQUMsTUFBTSxDQUFDOztBQUUzQixNQUFJLE9BQU8sR0FBRyxJQUFJLFdBQVcsQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLENBQUM7O0FBRTVDLE1BQUksVUFBVSxHQUFHLGVBQWUsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7O0FBRTNELE1BQUksWUFBWSxHQUFHLE1BQU0sQ0FBQyxNQUFNLEdBQUcsUUFBUSxDQUFDLE1BQU0sR0FBRyxPQUFPLENBQUMsTUFBTSxHQUFHLFVBQVUsQ0FBQyxNQUFNLENBQUM7QUFDeEYsTUFBSSxNQUFNLEdBQUcsSUFBSSxXQUFXLENBQUMsWUFBWSxDQUFDLENBQUM7OztBQUczQyxRQUFNLENBQUMsR0FBRyxDQUFDLE1BQU0sRUFBRSxDQUFDLENBQUMsQ0FBQztBQUN0QixRQUFNLENBQUMsR0FBRyxDQUFDLFFBQVEsRUFBRSxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7QUFDcEMsUUFBTSxDQUFDLEdBQUcsQ0FBQyxPQUFPLEVBQUUsTUFBTSxDQUFDLE1BQU0sR0FBRyxRQUFRLENBQUMsTUFBTSxDQUFDLENBQUM7QUFDckQsUUFBTSxDQUFDLEdBQUcsQ0FBQyxVQUFVLEVBQUUsTUFBTSxDQUFDLE1BQU0sR0FBRyxRQUFRLENBQUMsTUFBTSxHQUFHLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQzs7QUFFekUsU0FBTyxNQUFNLENBQUMsTUFBTSxDQUFDO0NBQ3RCLENBQUE7Ozs7QUFJRCxNQUFNLENBQUMsT0FBTyxDQUFDLGFBQWEsR0FBRyxVQUFTLE9BQU8sRUFBRTs7QUFFL0MsTUFBSSxNQUFNLEdBQUcsT0FBTyxDQUFDLElBQUksQ0FBQzs7O0FBRzFCLE1BQUksU0FBUyxHQUFHLElBQUksWUFBWSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDckQsTUFBSSxJQUFJLEdBQUcsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFBOzs7QUFHdkIsTUFBSSxnQkFBZ0IsR0FBRyxJQUFJLFdBQVcsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDO0FBQzVELE1BQUksV0FBVyxHQUFHLGdCQUFnQixDQUFDLENBQUMsQ0FBQyxDQUFDOzs7QUFHdEMsTUFBSSxlQUFlLEdBQUksQ0FBQyxHQUFHLFdBQVcsQUFBQyxDQUFDO0FBQ3hDLE1BQUksS0FBSyxHQUFHLElBQUksWUFBWSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsRUFBRSxFQUFFLEVBQUUsR0FBRyxlQUFlLENBQUMsQ0FBQyxDQUFDOzs7QUFHckUsTUFBSSxhQUFhLEdBQUcsSUFBSSxXQUFXLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxFQUFFLEdBQUcsZUFBZSxDQUFDLENBQUMsQ0FBQztBQUN4RSxNQUFJLFFBQVEsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLGVBQWUsQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDOztBQUUxRCxTQUFPLEVBQUUsSUFBSSxFQUFKLElBQUksRUFBRSxLQUFLLEVBQUwsS0FBSyxFQUFFLFFBQVEsRUFBUixRQUFRLEVBQUUsQ0FBQztDQUNsQyxDQUFBIiwiZmlsZSI6ImVzNi91dGlscy9uZXR3b3JrLXV0aWxzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXG5cbi8vIGNvbmNhdCB0aGUgbGZvIHN0cmVhbSwgdGltZSBhbmQgbWV0YURhdGEgaW50byBhIHNpbmdsZSBidWZmZXJcbi8vIHRoZSBjb25jYXRlbmF0aW9uIGlzIGRvbmUgYXMgZm9sbG93IDpcbi8vICAqIHRpbWUgICAgICAgICAgPT4gOCBieXRlc1xuLy8gICogZnJhbWUubGVuZ3RoICA9PiAyIGJ5dGVzXG4vLyAgKiBmcmFtZSAgICAgICAgID0+IDQgKiBmcmFtZUxlbmd0aCBieXRlc1xuLy8gICogbWV0YURhdGEgICAgICA9PiByZXN0IG9mIHRoZSBtZXNzYWdlXG4vLyBAcmV0dXJuICBBcnJheUJ1ZmZlciBvZiB0aGUgY3JlYXRlZCBtZXNzYWdlXG4vLyBAbm90ZSAgICBtdXN0IGNyZWF0ZSBhIG5ldyBidWZmZXIgZWFjaCB0aW1lIGJlY2F1c2UgbWV0YURhdGEgbGVuZ3RoIGlzIG5vdCBrbm93blxubW9kdWxlLmV4cG9ydHMuZW5jb2RlTWVzc2FnZSA9IGZ1bmN0aW9uKHRpbWUsIGZyYW1lLCBtZXRhRGF0YSkge1xuICAgLy8gc2hvdWxkIHByb2JhYmx5IHVzZSB1c2UgRGF0YVZpZXcgaW5zdGVhZFxuICAvLyBodHRwOi8vd3d3Lmh0bWw1cm9ja3MuY29tL2VuL3R1dG9yaWFscy93ZWJnbC90eXBlZF9hcnJheXMvXG4gIHZhciB0aW1lNjQgPSBuZXcgRmxvYXQ2NEFycmF5KDEpO1xuICB0aW1lNjRbMF0gPSB0aW1lO1xuICB2YXIgdGltZTE2ID0gbmV3IFVpbnQxNkFycmF5KHRpbWU2NC5idWZmZXIpO1xuXG4gIHZhciBsZW5ndGgxNiA9IG5ldyBVaW50MTZBcnJheSgxKTtcbiAgbGVuZ3RoMTZbMF0gPSBmcmFtZS5sZW5ndGg7XG5cbiAgdmFyIGZyYW1lMTYgPSBuZXcgVWludDE2QXJyYXkoZnJhbWUuYnVmZmVyKTtcblxuICB2YXIgbWV0YURhdGExNiA9IHN0cjJVaW50MTZBcnJheShKU09OLnN0cmluZ2lmeShtZXRhRGF0YSkpO1xuXG4gIHZhciBidWZmZXJMZW5ndGggPSB0aW1lMTYubGVuZ3RoICsgbGVuZ3RoMTYubGVuZ3RoICsgZnJhbWUxNi5sZW5ndGggKyBtZXRhRGF0YTE2Lmxlbmd0aDtcbiAgdmFyIGJ1ZmZlciA9IG5ldyBVaW50MTZBcnJheShidWZmZXJMZW5ndGgpO1xuXG4gIC8vIGJ1ZmZlciBpcyB0aGUgY29uY2F0ZW5hdGlvbiBvZiB0aW1lLCBmcmFtZUxlbmd0aCwgZnJhbWUsIG1ldGFEYXRhXG4gIGJ1ZmZlci5zZXQodGltZTE2LCAwKTtcbiAgYnVmZmVyLnNldChsZW5ndGgxNiwgdGltZTE2Lmxlbmd0aCk7XG4gIGJ1ZmZlci5zZXQoZnJhbWUxNiwgdGltZTE2Lmxlbmd0aCArIGxlbmd0aDE2Lmxlbmd0aCk7XG4gIGJ1ZmZlci5zZXQobWV0YURhdGExNiwgdGltZTE2Lmxlbmd0aCArIGxlbmd0aDE2Lmxlbmd0aCArIGZyYW1lMTYubGVuZ3RoKTtcblxuICByZXR1cm4gYnVmZmVyLmJ1ZmZlcjtcbn1cblxuLy8gcmVjcmVhdGUgdGhlIExmbyBzdHJlYW0gKHRpbWUsIGZyYW1lLCBtZXRhRGF0YSkgZm9ybSBhIGJ1ZmZlclxuLy8gY3JlYXRlZCB3aXRoIGBlbmNvZGVNZXNzYWdlYFxubW9kdWxlLmV4cG9ydHMuZGVjb2RlTWVzc2FnZSA9IGZ1bmN0aW9uKG1lc3NhZ2UpIHtcblxuICB2YXIgYnVmZmVyID0gbWVzc2FnZS5kYXRhO1xuXG4gIC8vIHRpbWUgaXMgYSBmbG9hdDY0QXJyYXkgb2Ygc2l6ZSAxICg4IGJ5dGVzKVxuICB2YXIgdGltZUFycmF5ID0gbmV3IEZsb2F0NjRBcnJheShidWZmZXIuc2xpY2UoMCwgOCkpO1xuICB2YXIgdGltZSA9IHRpbWVBcnJheVswXVxuXG4gIC8vIGZyYW1lIGxlbmd0aCBpcyBlbmNvZGVkIGluIDIgYnl0ZXNcbiAgdmFyIGZyYW1lTGVuZ3RoQXJyYXkgPSBuZXcgVWludDE2QXJyYXkoYnVmZmVyLnNsaWNlKDgsIDEwKSk7XG4gIHZhciBmcmFtZUxlbmd0aCA9IGZyYW1lTGVuZ3RoQXJyYXlbMF07XG5cbiAgLy8gZnJhbWUgaXMgYSBmbG9hdDMyQXJyYXkgKDQgYnl0ZXMpICogZnJhbWVMZW5ndGhcbiAgdmFyIGZyYW1lQnl0ZUxlbmd0aCA9ICg0ICogZnJhbWVMZW5ndGgpO1xuICB2YXIgZnJhbWUgPSBuZXcgRmxvYXQzMkFycmF5KGJ1ZmZlci5zbGljZSgxMCwgMTAgKyBmcmFtZUJ5dGVMZW5ndGgpKTtcblxuICAvLyBtZXRhRGF0YSBpcyB0aGUgcmVzdCBvZiB0aGUgYnVmZmVyXG4gIHZhciBtZXRhRGF0YUFycmF5ID0gbmV3IFVpbnQxNkFycmF5KGJ1ZmZlci5zbGljZSgxMCArIGZyYW1lQnl0ZUxlbmd0aCkpO1xuICB2YXIgbWV0YURhdGEgPSBKU09OLnBhcnNlKFVpbnQxNkFycmF5MnN0cihtZXRhRGF0YUFycmF5KSk7XG5cbiAgcmV0dXJuIHsgdGltZSwgZnJhbWUsIG1ldGFEYXRhIH07XG59Il19