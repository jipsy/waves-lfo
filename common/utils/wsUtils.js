'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.bufferToArrayBuffer = bufferToArrayBuffer;
exports.arrayBufferToBuffer = arrayBufferToBuffer;
exports.Uint16Array2json = Uint16Array2json;
exports.json2Uint16Array = json2Uint16Array;
//http://stackoverflow.com/questions/8609289/convert-a-binary-nodejs-buffer-to-javascript-arraybuffer
// converts a nodejs Buffer to ArrayBuffer
function bufferToArrayBuffer(buffer) {
  var ab = new ArrayBuffer(buffer.length);
  var view = new Uint8Array(ab);

  for (var i = 0; i < buffer.length; ++i) {
    view[i] = buffer[i];
  }return ab;
}

function arrayBufferToBuffer(arrayBuffer) {
  var buffer = new Buffer(arrayBuffer.byteLength);
  var view = new Uint8Array(arrayBuffer);

  for (var i = 0; i < buffer.length; ++i) {
    buffer[i] = view[i];
  }return buffer;
}

// http://updates.html5rocks.com/2012/06/How-to-convert-ArrayBuffer-to-and-from-String
function Uint16Array2json(arr) {
  var str = String.fromCharCode.apply(null, arr);
  return JSON.parse(str.replace(/\u0000/g, ''));
}

function json2Uint16Array(str) {
  var buffer = new ArrayBuffer(str.length * 2); // 2 bytes for each char
  var bufferView = new Uint16Array(buffer);

  for (var i = 0, l = str.length; i < l; i++) {
    bufferView[i] = str.charCodeAt(i);
  }return bufferView;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndzVXRpbHMuanMiXSwibmFtZXMiOlsiYnVmZmVyVG9BcnJheUJ1ZmZlciIsImFycmF5QnVmZmVyVG9CdWZmZXIiLCJVaW50MTZBcnJheTJqc29uIiwianNvbjJVaW50MTZBcnJheSIsImJ1ZmZlciIsImFiIiwiQXJyYXlCdWZmZXIiLCJsZW5ndGgiLCJ2aWV3IiwiVWludDhBcnJheSIsImkiLCJhcnJheUJ1ZmZlciIsIkJ1ZmZlciIsImJ5dGVMZW5ndGgiLCJhcnIiLCJzdHIiLCJTdHJpbmciLCJmcm9tQ2hhckNvZGUiLCJhcHBseSIsIkpTT04iLCJwYXJzZSIsInJlcGxhY2UiLCJidWZmZXJWaWV3IiwiVWludDE2QXJyYXkiLCJsIiwiY2hhckNvZGVBdCJdLCJtYXBwaW5ncyI6Ijs7Ozs7UUFFZ0JBLG1CLEdBQUFBLG1CO1FBVUFDLG1CLEdBQUFBLG1CO1FBV0FDLGdCLEdBQUFBLGdCO1FBS0FDLGdCLEdBQUFBLGdCO0FBNUJoQjtBQUNBO0FBQ08sU0FBU0gsbUJBQVQsQ0FBNkJJLE1BQTdCLEVBQXFDO0FBQzFDLE1BQU1DLEtBQUssSUFBSUMsV0FBSixDQUFnQkYsT0FBT0csTUFBdkIsQ0FBWDtBQUNBLE1BQU1DLE9BQU8sSUFBSUMsVUFBSixDQUFlSixFQUFmLENBQWI7O0FBRUEsT0FBSyxJQUFJSyxJQUFJLENBQWIsRUFBZ0JBLElBQUlOLE9BQU9HLE1BQTNCLEVBQW1DLEVBQUVHLENBQXJDO0FBQ0VGLFNBQUtFLENBQUwsSUFBVU4sT0FBT00sQ0FBUCxDQUFWO0FBREYsR0FHQSxPQUFPTCxFQUFQO0FBQ0Q7O0FBRU0sU0FBU0osbUJBQVQsQ0FBNkJVLFdBQTdCLEVBQTBDO0FBQy9DLE1BQU1QLFNBQVMsSUFBSVEsTUFBSixDQUFXRCxZQUFZRSxVQUF2QixDQUFmO0FBQ0EsTUFBTUwsT0FBTyxJQUFJQyxVQUFKLENBQWVFLFdBQWYsQ0FBYjs7QUFFQSxPQUFLLElBQUlELElBQUksQ0FBYixFQUFnQkEsSUFBSU4sT0FBT0csTUFBM0IsRUFBbUMsRUFBRUcsQ0FBckM7QUFDRU4sV0FBT00sQ0FBUCxJQUFZRixLQUFLRSxDQUFMLENBQVo7QUFERixHQUdBLE9BQU9OLE1BQVA7QUFDRDs7QUFFRDtBQUNPLFNBQVNGLGdCQUFULENBQTBCWSxHQUExQixFQUErQjtBQUNwQyxNQUFNQyxNQUFNQyxPQUFPQyxZQUFQLENBQW9CQyxLQUFwQixDQUEwQixJQUExQixFQUFnQ0osR0FBaEMsQ0FBWjtBQUNBLFNBQU9LLEtBQUtDLEtBQUwsQ0FBV0wsSUFBSU0sT0FBSixDQUFZLFNBQVosRUFBdUIsRUFBdkIsQ0FBWCxDQUFQO0FBQ0Q7O0FBRU0sU0FBU2xCLGdCQUFULENBQTBCWSxHQUExQixFQUErQjtBQUNwQyxNQUFNWCxTQUFTLElBQUlFLFdBQUosQ0FBZ0JTLElBQUlSLE1BQUosR0FBYSxDQUE3QixDQUFmLENBRG9DLENBQ1k7QUFDaEQsTUFBTWUsYUFBYSxJQUFJQyxXQUFKLENBQWdCbkIsTUFBaEIsQ0FBbkI7O0FBRUEsT0FBSyxJQUFJTSxJQUFJLENBQVIsRUFBV2MsSUFBSVQsSUFBSVIsTUFBeEIsRUFBZ0NHLElBQUljLENBQXBDLEVBQXVDZCxHQUF2QztBQUNFWSxlQUFXWixDQUFYLElBQWdCSyxJQUFJVSxVQUFKLENBQWVmLENBQWYsQ0FBaEI7QUFERixHQUdBLE9BQU9ZLFVBQVA7QUFDRCIsImZpbGUiOiJ3c1V0aWxzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy9odHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vcXVlc3Rpb25zLzg2MDkyODkvY29udmVydC1hLWJpbmFyeS1ub2RlanMtYnVmZmVyLXRvLWphdmFzY3JpcHQtYXJyYXlidWZmZXJcbi8vIGNvbnZlcnRzIGEgbm9kZWpzIEJ1ZmZlciB0byBBcnJheUJ1ZmZlclxuZXhwb3J0IGZ1bmN0aW9uIGJ1ZmZlclRvQXJyYXlCdWZmZXIoYnVmZmVyKSB7XG4gIGNvbnN0IGFiID0gbmV3IEFycmF5QnVmZmVyKGJ1ZmZlci5sZW5ndGgpO1xuICBjb25zdCB2aWV3ID0gbmV3IFVpbnQ4QXJyYXkoYWIpO1xuXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgYnVmZmVyLmxlbmd0aDsgKytpKVxuICAgIHZpZXdbaV0gPSBidWZmZXJbaV07XG5cbiAgcmV0dXJuIGFiO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gYXJyYXlCdWZmZXJUb0J1ZmZlcihhcnJheUJ1ZmZlcikge1xuICBjb25zdCBidWZmZXIgPSBuZXcgQnVmZmVyKGFycmF5QnVmZmVyLmJ5dGVMZW5ndGgpO1xuICBjb25zdCB2aWV3ID0gbmV3IFVpbnQ4QXJyYXkoYXJyYXlCdWZmZXIpO1xuXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgYnVmZmVyLmxlbmd0aDsgKytpKVxuICAgIGJ1ZmZlcltpXSA9IHZpZXdbaV07XG5cbiAgcmV0dXJuIGJ1ZmZlcjtcbn1cblxuLy8gaHR0cDovL3VwZGF0ZXMuaHRtbDVyb2Nrcy5jb20vMjAxMi8wNi9Ib3ctdG8tY29udmVydC1BcnJheUJ1ZmZlci10by1hbmQtZnJvbS1TdHJpbmdcbmV4cG9ydCBmdW5jdGlvbiBVaW50MTZBcnJheTJqc29uKGFycikge1xuICBjb25zdCBzdHIgPSBTdHJpbmcuZnJvbUNoYXJDb2RlLmFwcGx5KG51bGwsIGFycik7XG4gIHJldHVybiBKU09OLnBhcnNlKHN0ci5yZXBsYWNlKC9cXHUwMDAwL2csICcnKSlcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGpzb24yVWludDE2QXJyYXkoc3RyKSB7XG4gIGNvbnN0IGJ1ZmZlciA9IG5ldyBBcnJheUJ1ZmZlcihzdHIubGVuZ3RoICogMik7IC8vIDIgYnl0ZXMgZm9yIGVhY2ggY2hhclxuICBjb25zdCBidWZmZXJWaWV3ID0gbmV3IFVpbnQxNkFycmF5KGJ1ZmZlcik7XG5cbiAgZm9yIChsZXQgaSA9IDAsIGwgPSBzdHIubGVuZ3RoOyBpIDwgbDsgaSsrKVxuICAgIGJ1ZmZlclZpZXdbaV0gPSBzdHIuY2hhckNvZGVBdChpKTtcblxuICByZXR1cm4gYnVmZmVyVmlldztcbn1cbiJdfQ==